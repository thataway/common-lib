// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package strlib

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// StrlibClient is the client API for Strlib service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type StrlibClient interface {
	Uppercase(ctx context.Context, in *UppercaseQuery, opts ...grpc.CallOption) (*UppercaseResponse, error)
}

type strlibClient struct {
	cc grpc.ClientConnInterface
}

func NewStrlibClient(cc grpc.ClientConnInterface) StrlibClient {
	return &strlibClient{cc}
}

func (c *strlibClient) Uppercase(ctx context.Context, in *UppercaseQuery, opts ...grpc.CallOption) (*UppercaseResponse, error) {
	out := new(UppercaseResponse)
	err := c.cc.Invoke(ctx, "/strlib.v1.strlib/Uppercase", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// StrlibServer is the server API for Strlib service.
// All implementations must embed UnimplementedStrlibServer
// for forward compatibility
type StrlibServer interface {
	Uppercase(context.Context, *UppercaseQuery) (*UppercaseResponse, error)
	mustEmbedUnimplementedStrlibServer()
}

// UnimplementedStrlibServer must be embedded to have forward compatible implementations.
type UnimplementedStrlibServer struct {
}

func (UnimplementedStrlibServer) Uppercase(context.Context, *UppercaseQuery) (*UppercaseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Uppercase not implemented")
}
func (UnimplementedStrlibServer) mustEmbedUnimplementedStrlibServer() {}

// UnsafeStrlibServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to StrlibServer will
// result in compilation errors.
type UnsafeStrlibServer interface {
	mustEmbedUnimplementedStrlibServer()
}

func RegisterStrlibServer(s grpc.ServiceRegistrar, srv StrlibServer) {
	s.RegisterService(&Strlib_ServiceDesc, srv)
}

func _Strlib_Uppercase_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UppercaseQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StrlibServer).Uppercase(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/strlib.v1.strlib/Uppercase",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StrlibServer).Uppercase(ctx, req.(*UppercaseQuery))
	}
	return interceptor(ctx, in, info, handler)
}

// Strlib_ServiceDesc is the grpc.ServiceDesc for Strlib service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Strlib_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "strlib.v1.strlib",
	HandlerType: (*StrlibServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Uppercase",
			Handler:    _Strlib_Uppercase_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "strlib/strlib.proto",
}
